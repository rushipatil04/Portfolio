{"version":3,"file":"static/js/57.71843145.chunk.js","mappings":"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","sources":["components/Contact.js"],"sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPaperPlane } from '@fortawesome/free-solid-svg-icons';\n\nconst ContactSection = styled.section`\n  padding: 100px 0;\n  min-height: 100vh;\n  background: linear-gradient(180deg, rgba(10, 25, 47, 0.6) 0%, rgba(10, 25, 47, 0.8) 100%);\n\n  @media (max-width: 768px) {\n    padding: 80px 0;\n  }\n`;\n\nconst Container = styled.div`\n  max-width: 900px;\n  margin: 0 auto;\n  padding: 0 2rem;\n`;\n\nconst SectionTitle = styled(motion.h2)`\n  font-size: 2.5rem;\n  text-align: center;\n  margin-bottom: 3.5rem;\n  color: var(--accent-color);\n\n  @media (max-width: 768px) {\n    font-size: 2rem;\n    margin-bottom: 2.5rem;\n  }\n\n  @media (max-width: 480px) {\n    font-size: 1.8rem;\n  }\n`;\n\nconst ContactContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 2rem;\n\n  @media (max-width: 768px) {\n    gap: 1.5rem;\n  }\n`;\n\nconst ContactForm = styled(motion.form)`\n  width: 100%;\n  max-width: 600px;\n  background: rgba(255, 255, 255, 0.05);\n  backdrop-filter: blur(8px);\n  border-radius: 12px;\n  padding: 2rem;\n  border: 1px solid rgba(255, 255, 255, 0.08);\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n\n  &:hover {\n    border-color: rgba(100, 255, 218, 0.12);\n    box-shadow: 0 8px 32px rgba(100, 255, 218, 0.1);\n  }\n\n  @media (max-width: 768px) {\n    padding: 1.5rem;\n  }\n`;\n\nconst FormGroup = styled.div`\n  margin-bottom: 1.5rem;\n`;\n\nconst Label = styled.label`\n  display: block;\n  margin-bottom: 0.5rem;\n  color: var(--text-primary);\n  font-size: 0.9rem;\n  letter-spacing: 0.5px;\n`;\n\nconst Input = styled(motion.input)`\n  width: 100%;\n  padding: 0.8rem;\n  background: rgba(255, 255, 255, 0.05);\n  border: 1px solid rgba(255, 255, 255, 0.08);\n  border-radius: 4px;\n  color: var(--text-primary);\n  font-size: 1rem;\n  transition: all 0.3s ease;\n\n  &:focus {\n    outline: none;\n    border-color: var(--accent-color);\n    box-shadow: 0 0 10px rgba(100, 255, 218, 0.1);\n  }\n`;\n\nconst TextArea = styled(motion.textarea)`\n  width: 100%;\n  padding: 0.8rem;\n  background: rgba(255, 255, 255, 0.05);\n  border: 1px solid rgba(255, 255, 255, 0.08);\n  border-radius: 4px;\n  color: var(--text-primary);\n  font-size: 1rem;\n  min-height: 150px;\n  resize: vertical;\n  transition: all 0.3s ease;\n\n  &:focus {\n    outline: none;\n    border-color: var(--accent-color);\n    box-shadow: 0 0 10px rgba(100, 255, 218, 0.1);\n  }\n`;\n\nconst SubmitButton = styled(motion.button)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 0.5rem;\n  padding: 1rem 2rem;\n  background: transparent;\n  border: 2px solid var(--accent-color);\n  color: var(--accent-color);\n  font-size: 1rem;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: all 0.3s ease;\n\n  &:hover {\n    background: rgba(100, 255, 218, 0.1);\n  }\n\n  &:disabled {\n    opacity: 0.7;\n    cursor: not-allowed;\n  }\n`;\n\nconst Feedback = styled(motion.div)`\n  margin-top: 1rem;\n  padding: 1rem;\n  border-radius: 4px;\n  text-align: center;\n  background: ${props => props.isError ? 'rgba(255, 0, 0, 0.1)' : 'rgba(0, 255, 0, 0.1)'};\n  color: ${props => props.isError ? '#ff6b6b' : '#69db7c'};\n`;\n\nconst Contact = () => {\n  const [formState, setFormState] = useState({\n    name: '',\n    email: '',\n    message: ''\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [feedback, setFeedback] = useState(null);\n\n  const handleChange = (e) => {\n    setFormState({\n      ...formState,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    try {\n      // Here you would typically send the form data to your backend\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulated API call\n\n      setFeedback({\n        message: 'Message sent successfully! I will get back to you soon.',\n        isError: false\n      });\n      setFormState({ name: '', email: '', message: '' });\n    } catch (error) {\n      setFeedback({\n        message: 'Failed to send message. Please try again later.',\n        isError: true\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const formVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.8,\n        ease: [0.6, -0.05, 0.01, 0.99]\n      }\n    }\n  };\n\n  const inputVariants = {\n    focus: {\n      scale: 1.02,\n      transition: { duration: 0.2 }\n    }\n  };\n\n  return (\n    <ContactSection id=\"contact\">\n      <Container>\n        <SectionTitle\n          initial=\"hidden\"\n          whileInView=\"visible\"\n          viewport={{ once: true }}\n          variants={formVariants}\n        >\n          Get in Touch\n        </SectionTitle>\n        <ContactContent>\n          <ContactForm\n            onSubmit={handleSubmit}\n            initial=\"hidden\"\n            whileInView=\"visible\"\n            viewport={{ once: true }}\n            variants={formVariants}\n          >\n            <FormGroup>\n              <Label htmlFor=\"name\">Name</Label>\n              <Input\n                type=\"text\"\n                id=\"name\"\n                name=\"name\"\n                value={formState.name}\n                onChange={handleChange}\n                required\n                whileFocus=\"focus\"\n                variants={inputVariants}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                type=\"email\"\n                id=\"email\"\n                name=\"email\"\n                value={formState.email}\n                onChange={handleChange}\n                required\n                whileFocus=\"focus\"\n                variants={inputVariants}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label htmlFor=\"message\">Message</Label>\n              <TextArea\n                id=\"message\"\n                name=\"message\"\n                value={formState.message}\n                onChange={handleChange}\n                required\n                whileFocus=\"focus\"\n                variants={inputVariants}\n              />\n            </FormGroup>\n            <SubmitButton\n              type=\"submit\"\n              disabled={isSubmitting}\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n            >\n              <span>Send Message</span>\n              <FontAwesomeIcon icon={faPaperPlane} />\n            </SubmitButton>\n            {feedback && (\n              <Feedback\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: -10 }}\n                isError={feedback.isError}\n              >\n                {feedback.message}\n              </Feedback>\n            )}\n          </ContactForm>\n        </ContactContent>\n      </Container>\n    </ContactSection>\n  );\n};\n\nexport default Contact;\n"],"names":["ContactSection","styled","section","Container","div","SectionTitle","motion","h2","ContactContent","ContactForm","form","FormGroup","Label","label","Input","input","TextArea","textarea","SubmitButton","button","Feedback","props","isError","Contact","formState","setFormState","useState","name","email","message","isSubmitting","setIsSubmitting","feedback","setFeedback","handleChange","e","target","value","formVariants","hidden","opacity","y","visible","transition","duration","ease","inputVariants","focus","scale","_jsx","id","children","_jsxs","initial","whileInView","viewport","once","variants","onSubmit","async","preventDefault","Promise","resolve","setTimeout","error","htmlFor","type","onChange","required","whileFocus","disabled","whileHover","whileTap","FontAwesomeIcon","icon","faPaperPlane","animate","exit"],"sourceRoot":""}